/* 1. Таблица #oper хранит информацию о количестве произведенных операций на каждую календарную дату.  
Вывести на каждую дату количества операций, совершенное с начала месяца по указанную дату включительно накопительным итогом. 
*/

BEGIN TRANSACTION;

CREATE TABLE oper ([date] date, cnt int);

insert into oper
values ('2019-06-02',     1985), 
    ('2019-06-03',     1577), 
    ('2019-06-04',     1597), 
    ('2019-06-05',     1468), 
    ('2019-07-06',     82), 
    ('2019-07-08',     1689), 
    ('2019-07-09',     1556), 
    ('2019-07-10',     1480), 
    ('2019-07-11',     1405), 
    ('2019-07-12',     1502);

SELECT date, SUM(cnt) OVER (PARTITION BY STRFTIME("%m-%Y", date) ORDER BY date) AS N_OPS
FROM oper;

Output:
2019-06-02|1985
2019-06-03|3562
2019-06-04|5159
2019-06-05|6627
2019-07-06|82
2019-07-08|1771
2019-07-09|3327
2019-07-10|4807
2019-07-11|6212
2019-07-12|7714

/* 2. Даны месячные срезы сегментов клиентов, нужно получить по каждому клиенту периоды действия каждого сегмента. 
NB! Если известна только одна дата действия сегмента, то считается что период для сегмента еще не закончился и нам известна только дата начала периода. Соответственно дата окончания периода должна быть представлена в виде null
*/

BEGIN TRANSACTION;

CREATE TABLE segment ([date] date, ClientID varchar(6), SegmentID int);

insert into segment
values ('2018-01-31' ,'A11111', 2), 
    ('2018-02-28' ,'A11111', 2), 
    ('2018-03-31' ,'A11111', 1), 
    ('2018-04-30' ,'A11111', 1), 
    ('2017-11-30' ,'B22222', 1), 
    ('2017-10-31' ,'B22222', 1), 
    ('2017-09-30' ,'B22222', 3), 
    ('2017-09-30' ,'C33333', 1), 
    ('2017-10-31' ,'C33333', 1); 

SELECT ClientID, SegmentID, min(date), IIF(min(date)=max(date), NULL, max(date)) FROM segment
GROUP BY ClientID, SegmentID;

Output:
A11111|1|2018-03-31|2018-04-30
A11111|2|2018-01-31|2018-02-28
B22222|1|2017-10-31|2017-11-30
B22222|3|2017-09-30|
C33333|1|2017-09-30|2017-10-31

/* 3. Есть список карт лояльности клиентов. Необходимо написать запрос, который вернет карты клиентов которые совершали покупки 2 месяца подряд и более.
*/

BEGIN TRANSACTION;

CREATE TABLE purchase (bonuscard int, date_purchase date);

insert into purchase 
values (2133, '2020-01-12'),
    (4791, '2020-03-02'),
    (1589, '2020-07-10'),
    (4455, '2020-12-22'),
    (6037, '2020-01-31'),
    (2133, '2020-03-18'),
    (1589, '2020-03-12'),
    (4791, '2020-05-02'),
    (4455, '2021-01-13'),
    (2133, '2020-01-03'),
    (6037, '2020-02-19'),
    (2133, '2020-01-10'),
    (1589, '2020-04-15'),
    (6037, '2020-08-07');

SELECT DISTINCT bonuscard
FROM purchase AS p1
WHERE EXISTS (
    SELECT 1
    FROM purchase AS p2
    WHERE p1.bonuscard = p2.bonuscard
        AND strftime('%Y-%m', p2.date_purchase, 'start of month', '+1 month') = strftime('%Y-%m', p1.date_purchase, 'start of month')
)
ORDER BY bonuscard;

Output:
1589
4455
6037